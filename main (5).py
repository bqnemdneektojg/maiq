import telebot
import smtplib
from telebot import *
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import datetime
import hashlib
import re
import requests
markupprofile = types.InlineKeyboardMarkup()
markupprofile.add(types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url='https://t.me/OLEG_DZHIHADOV'))
markupprofile.add(types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', url='https://telegra.ph/DZHIHAD-MAILER-07-28'))
WHITELIST = ['b0a9309ed39669014f51b940e3ddedf48419469aec5e0a62d61b3212f8a93656', 'c70a0d582ae76d310b21ee0b55e8c339d36f5add1d3f879f491d39826b1efc73', '7dcb7fd256bd2da8bb87afea6ccaed6d1284bba19b210d83a60912dc7d714377', '75a8a4bb0cfa29c896db7ce39d5d7ebe2e045561da2f8463dcce5a4e1186de51', 'c5744460e2256b58df17a214047c1727607a7479c7250d29357977d6d5403c6d', '7b47cfadd0476ae0f89eb18bed64479498f6081ba1df4165bf4338fceb2c530e', '83875b264c684999b5dd26b96f55ded364cc50532d9a7b09e98f4565d382128c', 'c3c5a72814cd35794d1b398592261a08034fe759bf13df76f1fad1c8792f2fe6', '288f054d6ceba778045f1d6e450dcd86ceee4d22e207cdf23d8f5a867e320d83', 'afc6f16803892f4338dea529bbf46b682a0e8bf4db8cf768e1900241efb26b78', '9be26c29828019e585091e1dfca381c090cadc2ba3e2b66c44cd0f485634c208', 'd9052612f0234d1081d7d74f3da8a44d794837cceddc28c23b6acb99cbc25051']
admin = "b0a9309ed39669014f51b940e3ddedf48419469aec5e0a62d61b3212f8a93656"
API_TOKEN = '6548237032:AAH1V1RUsVgc8zpXIuJT_nm13H-n_X20jDQ'
CONFIG_FILE = 'config.txt'
markup = types.InlineKeyboardMarkup(row_width=2)
btn1 = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', callback_data='send')
btn2 = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É', callback_data='mailcheck')
btn3 = types.InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
btn4 = types.InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
markup.add(btn1)
markup.add(btn2)
markup.add(btn3)
markup.add(btn4)


bot = telebot.TeleBot(API_TOKEN)

def validate_email(email):
    pattern = re.compile(r'^[\w\.-]+@[\w\.-]+\.\w+$')
    if re.match(pattern, email):
        return True
    else:
        return False


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    encrypted_id = hashlib.sha256(str(user_id).encode()).hexdigest()
    with open('users.txt', 'r') as file:
        if encrypted_id in file.read():
                print(".")
        else:
            with open('users.txt', 'a') as file:
                file.write(encrypted_id + '\n')
                print(".")
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ DzhihadMailer!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n\n@DzhihadMailer", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def start_email_dialog(call):
    user_id = call.from_user.id
    encrypted_id = hashlib.sha256(str(user_id).encode()).hexdigest()
    if encrypted_id in WHITELIST:
        if call.data == "send":
            msg = call.id
            bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
            bot.register_next_step_handler(msg, get_sender_email)
    else:
        bot.reply_to(message, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.\n–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏! –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç—É—Ç:\n@Oleg_Dzhihadov")

    if call.data == "profile":
        user_id = call.from_user.id
        encrypted_id = hashlib.sha256(str(user_id).encode()).hexdigest()

        value = encrypted_id
        if value in WHITELIST:
                status = '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        else:
                status = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        bot.send_message(user_id, f'–í–∞—à ID: {encrypted_id}\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}', reply_markup=markupprofile)

    elif call.data == "stats":
        valuepodpis = len(WHITELIST)
        with open('users.txt', 'r') as file:
                users_count = sum(1 for line in file)
                bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {valuepodpis}')
    elif call.data == "mailcheck":
        msg = call.message
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ email'—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        bot.register_next_step_handler(msg, validate_emails)


def validate_emails(message):
    emails = message.text.split(",")
    valid_emails = []
    invalid_emails = []

    for email in emails:
        if validate_email(email.strip()):
            valid_emails.append(email.strip())
        else:
            invalid_emails.append(email.strip())

    valid_count = len(valid_emails)
    invalid_count = len(invalid_emails)

    valid_emails_str = ", ".join(valid_emails)
    invalid_emails_str = ", ".join(invalid_emails)
    bot.send_message(message.chat.id, f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ email'—ã ({valid_count}): {valid_emails_str}\n‚õî –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ email'—ã ({invalid_count}): {invalid_emails_str}")

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == "send":
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
        bot.register_next_step_handler(msg, get_sender_email)


def get_sender_email(call):
    sender_email = call.message
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(msg, get_recipient_email, sender_email)

def get_recipient_email(call, sender_email):
    recipient_emails = call.message.text.split(",")
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:")
    bot.register_next_step_handler(msg, get_email_subject, sender_email, recipient_emails)

def get_email_subject(call, sender_email, recipient_emails):
    email_subject = call.message
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
    bot.register_next_step_handler(msg, send_email, sender_email, recipient_emails, email_subject)

def send_email(call, sender_email, recipient_emails, email_subject):
    email_text = message.text
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = ", ".join(recipient_emails)
    msg['Subject'] = email_subject
    msg.attach(MIMEText(email_text, 'plain'))

    try:
        with open(CONFIG_FILE, 'r') as file:
            config = file.read().splitlines()
            smtp_server = config[0]
            smtp_port = int(config[1])
            sender_email = config[2]
            sender_password = config[3]
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)

            sent_count = 0
            not_sent_count = 0
            error_message = ""

            start_time = datetime.datetime.now()

            for recipient_email in recipient_emails:
                try:
                    server.sendmail(sender_email, recipient_email, msg.as_string())
                    sent_count += 1
                except Exception as e:
                    not_sent_count += 1
                    error_message += f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å {recipient_email}: {str(e)}\n"

            end_time = datetime.datetime.now()
            total_time = end_time - start_time

            server.quit()

            if sent_count > 0:
                success_message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {sent_count}\n"
            else:
                success_message = ""

            if not_sent_count > 0:
                failure_message = f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å–µ–º: {not_sent_count}\n"
            else:
                failure_message = ""

            time_message = f"üïò –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time}\n@DzhihadMailer"

            bot.reply_to(message, success_message + failure_message + error_message + time_message)
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞—à–Ω–æ–µ...\n1. –ò—Å—á–µ—Ä–ø–∞–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –≤ 200 —Å–æ–æ–±—â–µ–Ω–∏–π\n2. –ü–æ—á—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è")
bot.polling()
